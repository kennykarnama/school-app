// Package genapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package genapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for AttendanceType.
const (
	HADIR           AttendanceType = "HADIR"
	IZIN            AttendanceType = "IZIN"
	SAKIT           AttendanceType = "SAKIT"
	TANPAKETERANGAN AttendanceType = "TANPA_KETERANGAN"
)

// Defines values for CreateStudentRelationStatus.
const (
	CreateStudentRelationStatusAYAHKANDUNG CreateStudentRelationStatus = "AYAH_KANDUNG"
	CreateStudentRelationStatusIBUKANDUNG  CreateStudentRelationStatus = "IBU_KANDUNG"
	CreateStudentRelationStatusWALI        CreateStudentRelationStatus = "WALI"
)

// Defines values for Gender.
const (
	FEMALE Gender = "FEMALE"
	MALE   Gender = "MALE"
)

// Defines values for Religion.
const (
	BUDDHA    Religion = "BUDDHA"
	HINDU     Religion = "HINDU"
	ISLAM     Religion = "ISLAM"
	KONGHUCU  Religion = "KONGHUCU"
	KRISTEN   Religion = "KRISTEN"
	PROTESTAN Religion = "PROTESTAN"
)

// Defines values for StudentRelationStatus.
const (
	StudentRelationStatusAYAHKANDUNG StudentRelationStatus = "AYAH_KANDUNG"
	StudentRelationStatusIBUKANDUNG  StudentRelationStatus = "IBU_KANDUNG"
	StudentRelationStatusWALI        StudentRelationStatus = "WALI"
)

// AcademicYear defines model for AcademicYear.
type AcademicYear struct {
	// ID ID of the academic year
	ID *openapi_types.UUID `json:"ID,omitempty"`

	// Label academic year label
	Label *string `json:"label,omitempty"`
}

// AttendanceItem defines model for AttendanceItem.
type AttendanceItem struct {
	At           *AttendanceType     `json:"at,omitempty"`
	RecordedDate *openapi_types.Date `json:"recorded_date,omitempty"`
	StudentId    *string             `json:"student_id,omitempty"`
}

// AttendanceType defines model for AttendanceType.
type AttendanceType string

// CreateAcademicYearReq defines model for CreateAcademicYearReq.
type CreateAcademicYearReq struct {
	Label *string `json:"label,omitempty"`
}

// CreateStudentRelation defines model for CreateStudentRelation.
type CreateStudentRelation struct {
	Address     *string                      `json:"address,omitempty"`
	Gender      *Gender                      `json:"gender,omitempty"`
	Name        *string                      `json:"name,omitempty"`
	Occupancy   *string                      `json:"occupancy,omitempty"`
	PhoneNumber *string                      `json:"phoneNumber,omitempty"`
	Status      *CreateStudentRelationStatus `json:"status,omitempty"`
}

// CreateStudentRelationStatus defines model for CreateStudentRelation.Status.
type CreateStudentRelationStatus string

// EmptyResponse defines model for EmptyResponse.
type EmptyResponse = map[string]interface{}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// ErrorCode error code
	ErrorCode *string `json:"errorCode,omitempty"`

	// ErrorMessage error message
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// HttpCode http status error code
	HttpCode *int `json:"httpCode,omitempty"`
}

// Gender defines model for Gender.
type Gender string

// ListAcademicYear defines model for ListAcademicYear.
type ListAcademicYear struct {
	Items *[]AcademicYear `json:"items,omitempty"`
}

// LoginReq defines model for LoginReq.
type LoginReq struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// LoginResp defines model for LoginResp.
type LoginResp struct {
	Token *string `json:"token,omitempty"`
}

// PatchAcademicYearReq defines model for PatchAcademicYearReq.
type PatchAcademicYearReq struct {
	Label *string `json:"label,omitempty"`
}

// PatchStudentReq defines model for PatchStudentReq.
type PatchStudentReq struct {
	AlternativeId  *string             `json:"alternativeId,omitempty"`
	ChildNumber    *int                `json:"childNumber,omitempty"`
	Dob            *openapi_types.Date `json:"dob,omitempty"`
	Gender         *Gender             `json:"gender,omitempty"`
	Name           *string             `json:"name,omitempty"`
	Pob            *string             `json:"pob,omitempty"`
	ProfilePicture *string             `json:"profilePicture,omitempty"`
	Religion       *Religion           `json:"religion,omitempty"`
}

// RecordAttendanceReq defines model for RecordAttendanceReq.
type RecordAttendanceReq struct {
	Items *[]AttendanceItem `json:"items,omitempty"`
}

// RegisterStudent defines model for RegisterStudent.
type RegisterStudent struct {
	AlternativeId  *string             `json:"alternativeId,omitempty"`
	ChildNumber    *int                `json:"childNumber,omitempty"`
	Dob            *openapi_types.Date `json:"dob,omitempty"`
	Gender         *Gender             `json:"gender,omitempty"`
	Name           *string             `json:"name,omitempty"`
	Pob            *string             `json:"pob,omitempty"`
	ProfilePicture *string             `json:"profilePicture,omitempty"`
	Religion       *Religion           `json:"religion,omitempty"`
}

// RegisterTeacherReq defines model for RegisterTeacherReq.
type RegisterTeacherReq struct {
	Gender   *Gender   `json:"gender,omitempty"`
	Nik      *string   `json:"nik,omitempty"`
	Religion *Religion `json:"religion,omitempty"`
	UserId   *string   `json:"user_id,omitempty"`
}

// RegisterUserReq defines model for RegisterUserReq.
type RegisterUserReq struct {
	Email                *openapi_types.Email `json:"email,omitempty"`
	Name                 *string              `json:"name,omitempty"`
	Password             *string              `json:"password,omitempty"`
	PasswordConfirmation *string              `json:"password_confirmation,omitempty"`
	Username             *string              `json:"username,omitempty"`
}

// Religion defines model for Religion.
type Religion string

// Student defines model for Student.
type Student struct {
	AlternativeId  *string             `json:"alternativeId,omitempty"`
	ChildNumber    *int                `json:"childNumber,omitempty"`
	Dob            *openapi_types.Date `json:"dob,omitempty"`
	Gender         *Gender             `json:"gender,omitempty"`
	Id             *openapi_types.UUID `json:"id,omitempty"`
	Name           *string             `json:"name,omitempty"`
	Pob            *string             `json:"pob,omitempty"`
	ProfilePicture *string             `json:"profilePicture,omitempty"`
	Religion       *Religion           `json:"religion,omitempty"`
}

// StudentRelation defines model for StudentRelation.
type StudentRelation struct {
	Address     *string                `json:"address,omitempty"`
	Gender      *Gender                `json:"gender,omitempty"`
	Name        *string                `json:"name,omitempty"`
	Occupancy   *string                `json:"occupancy,omitempty"`
	PhoneNumber *string                `json:"phoneNumber,omitempty"`
	Status      *StudentRelationStatus `json:"status,omitempty"`
}

// StudentRelationStatus defines model for StudentRelation.Status.
type StudentRelationStatus string

// Teacher defines model for Teacher.
type Teacher struct {
	Gender   *Gender             `json:"gender,omitempty"`
	Id       *openapi_types.UUID `json:"id,omitempty"`
	Nik      *string             `json:"nik,omitempty"`
	Religion *Religion           `json:"religion,omitempty"`
	UserId   *string             `json:"user_id,omitempty"`
}

// User defines model for User.
type User struct {
	Email *openapi_types.Email `json:"email,omitempty"`
	Id    *openapi_types.UUID  `json:"id,omitempty"`
	Name  *string              `json:"name,omitempty"`
}

// CreateAcademicYearJSONRequestBody defines body for CreateAcademicYear for application/json ContentType.
type CreateAcademicYearJSONRequestBody = CreateAcademicYearReq

// RecordAttendanceJSONRequestBody defines body for RecordAttendance for application/json ContentType.
type RecordAttendanceJSONRequestBody = RecordAttendanceReq

// RegisterStudentRegisterStudentJSONRequestBody defines body for RegisterStudentRegisterStudent for application/json ContentType.
type RegisterStudentRegisterStudentJSONRequestBody = RegisterStudent

// PatchStudentPatchStudentJSONRequestBody defines body for PatchStudentPatchStudent for application/json ContentType.
type PatchStudentPatchStudentJSONRequestBody = PatchStudentReq

// CreateStudentRelationCreateStudentRelationJSONRequestBody defines body for CreateStudentRelationCreateStudentRelation for application/json ContentType.
type CreateStudentRelationCreateStudentRelationJSONRequestBody = CreateStudentRelation

// RegisterTeacherJSONRequestBody defines body for RegisterTeacher for application/json ContentType.
type RegisterTeacherJSONRequestBody = RegisterTeacherReq

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterUserReq

// AuthenticateUserJSONRequestBody defines body for AuthenticateUser for application/json ContentType.
type AuthenticateUserJSONRequestBody = LoginReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListAcademicYearsWithBody request with any body
	ListAcademicYearsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAcademicYearsWithBody request with any body
	PatchAcademicYearsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAcademicYearWithBody request with any body
	CreateAcademicYearWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAcademicYear(ctx context.Context, body CreateAcademicYearJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RecordAttendanceWithBody request with any body
	RecordAttendanceWithBody(ctx context.Context, ayid string, cid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RecordAttendance(ctx context.Context, ayid string, cid string, body RecordAttendanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterStudentRegisterStudentWithBody request with any body
	RegisterStudentRegisterStudentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterStudentRegisterStudent(ctx context.Context, body RegisterStudentRegisterStudentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStudentGetStudentWithBody request with any body
	GetStudentGetStudentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchStudentPatchStudentWithBody request with any body
	PatchStudentPatchStudentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchStudentPatchStudent(ctx context.Context, id string, body PatchStudentPatchStudentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStudentRelationCreateStudentRelationWithBody request with any body
	CreateStudentRelationCreateStudentRelationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateStudentRelationCreateStudentRelation(ctx context.Context, id string, body CreateStudentRelationCreateStudentRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterTeacherWithBody request with any body
	RegisterTeacherWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterTeacher(ctx context.Context, body RegisterTeacherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterUserWithBody request with any body
	RegisterUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterUser(ctx context.Context, body RegisterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthenticateUserWithBody request with any body
	AuthenticateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthenticateUser(ctx context.Context, body AuthenticateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListAcademicYearsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAcademicYearsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAcademicYearsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAcademicYearsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAcademicYearWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAcademicYearRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAcademicYear(ctx context.Context, body CreateAcademicYearJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAcademicYearRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecordAttendanceWithBody(ctx context.Context, ayid string, cid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecordAttendanceRequestWithBody(c.Server, ayid, cid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecordAttendance(ctx context.Context, ayid string, cid string, body RecordAttendanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecordAttendanceRequest(c.Server, ayid, cid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterStudentRegisterStudentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterStudentRegisterStudentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterStudentRegisterStudent(ctx context.Context, body RegisterStudentRegisterStudentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterStudentRegisterStudentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStudentGetStudentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStudentGetStudentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchStudentPatchStudentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchStudentPatchStudentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchStudentPatchStudent(ctx context.Context, id string, body PatchStudentPatchStudentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchStudentPatchStudentRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStudentRelationCreateStudentRelationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStudentRelationCreateStudentRelationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStudentRelationCreateStudentRelation(ctx context.Context, id string, body CreateStudentRelationCreateStudentRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStudentRelationCreateStudentRelationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterTeacherWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterTeacherRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterTeacher(ctx context.Context, body RegisterTeacherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterTeacherRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterUser(ctx context.Context, body RegisterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthenticateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthenticateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthenticateUser(ctx context.Context, body AuthenticateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthenticateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAcademicYearsRequestWithBody generates requests for ListAcademicYears with any type of body
func NewListAcademicYearsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/academic/years")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchAcademicYearsRequestWithBody generates requests for PatchAcademicYears with any type of body
func NewPatchAcademicYearsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/academic/years")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAcademicYearRequest calls the generic CreateAcademicYear builder with application/json body
func NewCreateAcademicYearRequest(server string, body CreateAcademicYearJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAcademicYearRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAcademicYearRequestWithBody generates requests for CreateAcademicYear with any type of body
func NewCreateAcademicYearRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/academic/years")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRecordAttendanceRequest calls the generic RecordAttendance builder with application/json body
func NewRecordAttendanceRequest(server string, ayid string, cid string, body RecordAttendanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRecordAttendanceRequestWithBody(server, ayid, cid, "application/json", bodyReader)
}

// NewRecordAttendanceRequestWithBody generates requests for RecordAttendance with any type of body
func NewRecordAttendanceRequestWithBody(server string, ayid string, cid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ayid", runtime.ParamLocationPath, ayid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cid", runtime.ParamLocationPath, cid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/academic/years/%s/classes/%s/attendances", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterStudentRegisterStudentRequest calls the generic RegisterStudentRegisterStudent builder with application/json body
func NewRegisterStudentRegisterStudentRequest(server string, body RegisterStudentRegisterStudentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterStudentRegisterStudentRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterStudentRegisterStudentRequestWithBody generates requests for RegisterStudentRegisterStudent with any type of body
func NewRegisterStudentRegisterStudentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/students")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStudentGetStudentRequestWithBody generates requests for GetStudentGetStudent with any type of body
func NewGetStudentGetStudentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/students/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchStudentPatchStudentRequest calls the generic PatchStudentPatchStudent builder with application/json body
func NewPatchStudentPatchStudentRequest(server string, id string, body PatchStudentPatchStudentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchStudentPatchStudentRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchStudentPatchStudentRequestWithBody generates requests for PatchStudentPatchStudent with any type of body
func NewPatchStudentPatchStudentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/students/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateStudentRelationCreateStudentRelationRequest calls the generic CreateStudentRelationCreateStudentRelation builder with application/json body
func NewCreateStudentRelationCreateStudentRelationRequest(server string, id string, body CreateStudentRelationCreateStudentRelationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStudentRelationCreateStudentRelationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateStudentRelationCreateStudentRelationRequestWithBody generates requests for CreateStudentRelationCreateStudentRelation with any type of body
func NewCreateStudentRelationCreateStudentRelationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/students/%s/relations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterTeacherRequest calls the generic RegisterTeacher builder with application/json body
func NewRegisterTeacherRequest(server string, body RegisterTeacherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterTeacherRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterTeacherRequestWithBody generates requests for RegisterTeacher with any type of body
func NewRegisterTeacherRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teachers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterUserRequest calls the generic RegisterUser builder with application/json body
func NewRegisterUserRequest(server string, body RegisterUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterUserRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterUserRequestWithBody generates requests for RegisterUser with any type of body
func NewRegisterUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthenticateUserRequest calls the generic AuthenticateUser builder with application/json body
func NewAuthenticateUserRequest(server string, body AuthenticateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthenticateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthenticateUserRequestWithBody generates requests for AuthenticateUser with any type of body
func NewAuthenticateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAcademicYearsWithBodyWithResponse request with any body
	ListAcademicYearsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListAcademicYearsResponse, error)

	// PatchAcademicYearsWithBodyWithResponse request with any body
	PatchAcademicYearsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAcademicYearsResponse, error)

	// CreateAcademicYearWithBodyWithResponse request with any body
	CreateAcademicYearWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAcademicYearResponse, error)

	CreateAcademicYearWithResponse(ctx context.Context, body CreateAcademicYearJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAcademicYearResponse, error)

	// RecordAttendanceWithBodyWithResponse request with any body
	RecordAttendanceWithBodyWithResponse(ctx context.Context, ayid string, cid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RecordAttendanceResponse, error)

	RecordAttendanceWithResponse(ctx context.Context, ayid string, cid string, body RecordAttendanceJSONRequestBody, reqEditors ...RequestEditorFn) (*RecordAttendanceResponse, error)

	// RegisterStudentRegisterStudentWithBodyWithResponse request with any body
	RegisterStudentRegisterStudentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterStudentRegisterStudentResponse, error)

	RegisterStudentRegisterStudentWithResponse(ctx context.Context, body RegisterStudentRegisterStudentJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterStudentRegisterStudentResponse, error)

	// GetStudentGetStudentWithBodyWithResponse request with any body
	GetStudentGetStudentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStudentGetStudentResponse, error)

	// PatchStudentPatchStudentWithBodyWithResponse request with any body
	PatchStudentPatchStudentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchStudentPatchStudentResponse, error)

	PatchStudentPatchStudentWithResponse(ctx context.Context, id string, body PatchStudentPatchStudentJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchStudentPatchStudentResponse, error)

	// CreateStudentRelationCreateStudentRelationWithBodyWithResponse request with any body
	CreateStudentRelationCreateStudentRelationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStudentRelationCreateStudentRelationResponse, error)

	CreateStudentRelationCreateStudentRelationWithResponse(ctx context.Context, id string, body CreateStudentRelationCreateStudentRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStudentRelationCreateStudentRelationResponse, error)

	// RegisterTeacherWithBodyWithResponse request with any body
	RegisterTeacherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterTeacherResponse, error)

	RegisterTeacherWithResponse(ctx context.Context, body RegisterTeacherJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterTeacherResponse, error)

	// RegisterUserWithBodyWithResponse request with any body
	RegisterUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterUserResponse, error)

	RegisterUserWithResponse(ctx context.Context, body RegisterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterUserResponse, error)

	// AuthenticateUserWithBodyWithResponse request with any body
	AuthenticateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthenticateUserResponse, error)

	AuthenticateUserWithResponse(ctx context.Context, body AuthenticateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthenticateUserResponse, error)
}

type ListAcademicYearsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAcademicYear
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListAcademicYearsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAcademicYearsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAcademicYearsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchAcademicYearReq
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchAcademicYearsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAcademicYearsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAcademicYearResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AcademicYear
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateAcademicYearResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAcademicYearResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RecordAttendanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EmptyResponse
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RecordAttendanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RecordAttendanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterStudentRegisterStudentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Student
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RegisterStudentRegisterStudentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterStudentRegisterStudentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStudentGetStudentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Student
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetStudentGetStudentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStudentGetStudentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchStudentPatchStudentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Student
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchStudentPatchStudentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchStudentPatchStudentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStudentRelationCreateStudentRelationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *StudentRelation
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateStudentRelationCreateStudentRelationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStudentRelationCreateStudentRelationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterTeacherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Teacher
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RegisterTeacherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterTeacherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RegisterUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthenticateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LoginResp
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AuthenticateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthenticateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAcademicYearsWithBodyWithResponse request with arbitrary body returning *ListAcademicYearsResponse
func (c *ClientWithResponses) ListAcademicYearsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListAcademicYearsResponse, error) {
	rsp, err := c.ListAcademicYearsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAcademicYearsResponse(rsp)
}

// PatchAcademicYearsWithBodyWithResponse request with arbitrary body returning *PatchAcademicYearsResponse
func (c *ClientWithResponses) PatchAcademicYearsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAcademicYearsResponse, error) {
	rsp, err := c.PatchAcademicYearsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAcademicYearsResponse(rsp)
}

// CreateAcademicYearWithBodyWithResponse request with arbitrary body returning *CreateAcademicYearResponse
func (c *ClientWithResponses) CreateAcademicYearWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAcademicYearResponse, error) {
	rsp, err := c.CreateAcademicYearWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAcademicYearResponse(rsp)
}

func (c *ClientWithResponses) CreateAcademicYearWithResponse(ctx context.Context, body CreateAcademicYearJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAcademicYearResponse, error) {
	rsp, err := c.CreateAcademicYear(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAcademicYearResponse(rsp)
}

// RecordAttendanceWithBodyWithResponse request with arbitrary body returning *RecordAttendanceResponse
func (c *ClientWithResponses) RecordAttendanceWithBodyWithResponse(ctx context.Context, ayid string, cid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RecordAttendanceResponse, error) {
	rsp, err := c.RecordAttendanceWithBody(ctx, ayid, cid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecordAttendanceResponse(rsp)
}

func (c *ClientWithResponses) RecordAttendanceWithResponse(ctx context.Context, ayid string, cid string, body RecordAttendanceJSONRequestBody, reqEditors ...RequestEditorFn) (*RecordAttendanceResponse, error) {
	rsp, err := c.RecordAttendance(ctx, ayid, cid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecordAttendanceResponse(rsp)
}

// RegisterStudentRegisterStudentWithBodyWithResponse request with arbitrary body returning *RegisterStudentRegisterStudentResponse
func (c *ClientWithResponses) RegisterStudentRegisterStudentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterStudentRegisterStudentResponse, error) {
	rsp, err := c.RegisterStudentRegisterStudentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterStudentRegisterStudentResponse(rsp)
}

func (c *ClientWithResponses) RegisterStudentRegisterStudentWithResponse(ctx context.Context, body RegisterStudentRegisterStudentJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterStudentRegisterStudentResponse, error) {
	rsp, err := c.RegisterStudentRegisterStudent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterStudentRegisterStudentResponse(rsp)
}

// GetStudentGetStudentWithBodyWithResponse request with arbitrary body returning *GetStudentGetStudentResponse
func (c *ClientWithResponses) GetStudentGetStudentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStudentGetStudentResponse, error) {
	rsp, err := c.GetStudentGetStudentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStudentGetStudentResponse(rsp)
}

// PatchStudentPatchStudentWithBodyWithResponse request with arbitrary body returning *PatchStudentPatchStudentResponse
func (c *ClientWithResponses) PatchStudentPatchStudentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchStudentPatchStudentResponse, error) {
	rsp, err := c.PatchStudentPatchStudentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchStudentPatchStudentResponse(rsp)
}

func (c *ClientWithResponses) PatchStudentPatchStudentWithResponse(ctx context.Context, id string, body PatchStudentPatchStudentJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchStudentPatchStudentResponse, error) {
	rsp, err := c.PatchStudentPatchStudent(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchStudentPatchStudentResponse(rsp)
}

// CreateStudentRelationCreateStudentRelationWithBodyWithResponse request with arbitrary body returning *CreateStudentRelationCreateStudentRelationResponse
func (c *ClientWithResponses) CreateStudentRelationCreateStudentRelationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStudentRelationCreateStudentRelationResponse, error) {
	rsp, err := c.CreateStudentRelationCreateStudentRelationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStudentRelationCreateStudentRelationResponse(rsp)
}

func (c *ClientWithResponses) CreateStudentRelationCreateStudentRelationWithResponse(ctx context.Context, id string, body CreateStudentRelationCreateStudentRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStudentRelationCreateStudentRelationResponse, error) {
	rsp, err := c.CreateStudentRelationCreateStudentRelation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStudentRelationCreateStudentRelationResponse(rsp)
}

// RegisterTeacherWithBodyWithResponse request with arbitrary body returning *RegisterTeacherResponse
func (c *ClientWithResponses) RegisterTeacherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterTeacherResponse, error) {
	rsp, err := c.RegisterTeacherWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterTeacherResponse(rsp)
}

func (c *ClientWithResponses) RegisterTeacherWithResponse(ctx context.Context, body RegisterTeacherJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterTeacherResponse, error) {
	rsp, err := c.RegisterTeacher(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterTeacherResponse(rsp)
}

// RegisterUserWithBodyWithResponse request with arbitrary body returning *RegisterUserResponse
func (c *ClientWithResponses) RegisterUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterUserResponse, error) {
	rsp, err := c.RegisterUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterUserResponse(rsp)
}

func (c *ClientWithResponses) RegisterUserWithResponse(ctx context.Context, body RegisterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterUserResponse, error) {
	rsp, err := c.RegisterUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterUserResponse(rsp)
}

// AuthenticateUserWithBodyWithResponse request with arbitrary body returning *AuthenticateUserResponse
func (c *ClientWithResponses) AuthenticateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthenticateUserResponse, error) {
	rsp, err := c.AuthenticateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticateUserResponse(rsp)
}

func (c *ClientWithResponses) AuthenticateUserWithResponse(ctx context.Context, body AuthenticateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthenticateUserResponse, error) {
	rsp, err := c.AuthenticateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthenticateUserResponse(rsp)
}

// ParseListAcademicYearsResponse parses an HTTP response from a ListAcademicYearsWithResponse call
func ParseListAcademicYearsResponse(rsp *http.Response) (*ListAcademicYearsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAcademicYearsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAcademicYear
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchAcademicYearsResponse parses an HTTP response from a PatchAcademicYearsWithResponse call
func ParsePatchAcademicYearsResponse(rsp *http.Response) (*PatchAcademicYearsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAcademicYearsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchAcademicYearReq
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAcademicYearResponse parses an HTTP response from a CreateAcademicYearWithResponse call
func ParseCreateAcademicYearResponse(rsp *http.Response) (*CreateAcademicYearResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAcademicYearResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AcademicYear
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRecordAttendanceResponse parses an HTTP response from a RecordAttendanceWithResponse call
func ParseRecordAttendanceResponse(rsp *http.Response) (*RecordAttendanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RecordAttendanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EmptyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRegisterStudentRegisterStudentResponse parses an HTTP response from a RegisterStudentRegisterStudentWithResponse call
func ParseRegisterStudentRegisterStudentResponse(rsp *http.Response) (*RegisterStudentRegisterStudentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterStudentRegisterStudentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Student
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetStudentGetStudentResponse parses an HTTP response from a GetStudentGetStudentWithResponse call
func ParseGetStudentGetStudentResponse(rsp *http.Response) (*GetStudentGetStudentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStudentGetStudentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Student
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchStudentPatchStudentResponse parses an HTTP response from a PatchStudentPatchStudentWithResponse call
func ParsePatchStudentPatchStudentResponse(rsp *http.Response) (*PatchStudentPatchStudentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchStudentPatchStudentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Student
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateStudentRelationCreateStudentRelationResponse parses an HTTP response from a CreateStudentRelationCreateStudentRelationWithResponse call
func ParseCreateStudentRelationCreateStudentRelationResponse(rsp *http.Response) (*CreateStudentRelationCreateStudentRelationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStudentRelationCreateStudentRelationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StudentRelation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRegisterTeacherResponse parses an HTTP response from a RegisterTeacherWithResponse call
func ParseRegisterTeacherResponse(rsp *http.Response) (*RegisterTeacherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterTeacherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Teacher
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRegisterUserResponse parses an HTTP response from a RegisterUserWithResponse call
func ParseRegisterUserResponse(rsp *http.Response) (*RegisterUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthenticateUserResponse parses an HTTP response from a AuthenticateUserWithResponse call
func ParseAuthenticateUserResponse(rsp *http.Response) (*AuthenticateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthenticateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LoginResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List academic year records
	// (GET /academic/years)
	ListAcademicYears(c *gin.Context)
	// Patch academic year records
	// (PATCH /academic/years)
	PatchAcademicYears(c *gin.Context)
	// Create a new academic year record
	// (POST /academic/years)
	CreateAcademicYear(c *gin.Context)
	// record attendance
	// (POST /academic/years/{ayid}/classes/{cid}/attendances)
	RecordAttendance(c *gin.Context, ayid string, cid string)
	// Register a new student
	// (POST /students)
	RegisterStudentRegisterStudent(c *gin.Context)
	// get student
	// (GET /students/{id})
	GetStudentGetStudent(c *gin.Context, id string)
	// Patch student
	// (PATCH /students/{id})
	PatchStudentPatchStudent(c *gin.Context, id string)
	// Create new student's relation
	// (POST /students/{id}/relations)
	CreateStudentRelationCreateStudentRelation(c *gin.Context, id string)
	// Register a new teacher
	// (POST /teachers)
	RegisterTeacher(c *gin.Context)
	// Register a new user
	// (POST /users)
	RegisterUser(c *gin.Context)
	// Login using credentials
	// (POST /users/login)
	AuthenticateUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListAcademicYears operation middleware
func (siw *ServerInterfaceWrapper) ListAcademicYears(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAcademicYears(c)
}

// PatchAcademicYears operation middleware
func (siw *ServerInterfaceWrapper) PatchAcademicYears(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchAcademicYears(c)
}

// CreateAcademicYear operation middleware
func (siw *ServerInterfaceWrapper) CreateAcademicYear(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAcademicYear(c)
}

// RecordAttendance operation middleware
func (siw *ServerInterfaceWrapper) RecordAttendance(c *gin.Context) {

	var err error

	// ------------- Path parameter "ayid" -------------
	var ayid string

	err = runtime.BindStyledParameterWithOptions("simple", "ayid", c.Param("ayid"), &ayid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ayid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "cid" -------------
	var cid string

	err = runtime.BindStyledParameterWithOptions("simple", "cid", c.Param("cid"), &cid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RecordAttendance(c, ayid, cid)
}

// RegisterStudentRegisterStudent operation middleware
func (siw *ServerInterfaceWrapper) RegisterStudentRegisterStudent(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterStudentRegisterStudent(c)
}

// GetStudentGetStudent operation middleware
func (siw *ServerInterfaceWrapper) GetStudentGetStudent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStudentGetStudent(c, id)
}

// PatchStudentPatchStudent operation middleware
func (siw *ServerInterfaceWrapper) PatchStudentPatchStudent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchStudentPatchStudent(c, id)
}

// CreateStudentRelationCreateStudentRelation operation middleware
func (siw *ServerInterfaceWrapper) CreateStudentRelationCreateStudentRelation(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateStudentRelationCreateStudentRelation(c, id)
}

// RegisterTeacher operation middleware
func (siw *ServerInterfaceWrapper) RegisterTeacher(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterTeacher(c)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// AuthenticateUser operation middleware
func (siw *ServerInterfaceWrapper) AuthenticateUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthenticateUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/academic/years", wrapper.ListAcademicYears)
	router.PATCH(options.BaseURL+"/academic/years", wrapper.PatchAcademicYears)
	router.POST(options.BaseURL+"/academic/years", wrapper.CreateAcademicYear)
	router.POST(options.BaseURL+"/academic/years/:ayid/classes/:cid/attendances", wrapper.RecordAttendance)
	router.POST(options.BaseURL+"/students", wrapper.RegisterStudentRegisterStudent)
	router.GET(options.BaseURL+"/students/:id", wrapper.GetStudentGetStudent)
	router.PATCH(options.BaseURL+"/students/:id", wrapper.PatchStudentPatchStudent)
	router.POST(options.BaseURL+"/students/:id/relations", wrapper.CreateStudentRelationCreateStudentRelation)
	router.POST(options.BaseURL+"/teachers", wrapper.RegisterTeacher)
	router.POST(options.BaseURL+"/users", wrapper.RegisterUser)
	router.POST(options.BaseURL+"/users/login", wrapper.AuthenticateUser)
}
