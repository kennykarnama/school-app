// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: academic_year.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAcademicYear = `-- name: CreateAcademicYear :exec
INSERT INTO academic_year(id, label, created_at) VALUES($1, $2, $3)
`

type CreateAcademicYearParams struct {
	ID        uuid.UUID
	Label     string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateAcademicYear(ctx context.Context, arg CreateAcademicYearParams) error {
	_, err := q.db.Exec(ctx, createAcademicYear, arg.ID, arg.Label, arg.CreatedAt)
	return err
}

const listAcademicYear = `-- name: ListAcademicYear :many
SELECT id, label, created_at FROM academic_year ORDER BY created_at desc
`

func (q *Queries) ListAcademicYear(ctx context.Context) ([]AcademicYear, error) {
	rows, err := q.db.Query(ctx, listAcademicYear)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AcademicYear
	for rows.Next() {
		var i AcademicYear
		if err := rows.Scan(&i.ID, &i.Label, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
